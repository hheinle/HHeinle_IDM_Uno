/*
 * generated by Xtext 2.23.0
 */
package org.xtexthheinle.uno.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtexthheinle.uno.myUno.Cartes_1_9;
import org.xtexthheinle.uno.myUno.Configuration_Depart;
import org.xtexthheinle.uno.myUno.Contestations;
import org.xtexthheinle.uno.myUno.Cumul;
import org.xtexthheinle.uno.myUno.Fin_Manche;
import org.xtexthheinle.uno.myUno.Fin_Partie;
import org.xtexthheinle.uno.myUno.Inversion;
import org.xtexthheinle.uno.myUno.Main;
import org.xtexthheinle.uno.myUno.Manche;
import org.xtexthheinle.uno.myUno.MyUnoPackage;
import org.xtexthheinle.uno.myUno.Perdants_manche;
import org.xtexthheinle.uno.myUno.Pioche;
import org.xtexthheinle.uno.myUno.Points_manche;
import org.xtexthheinle.uno.myUno.Talon;
import org.xtexthheinle.uno.myUno.Tourner_les_mains;
import org.xtexthheinle.uno.myUno.Variante_UNO;
import org.xtexthheinle.uno.services.MyUnoGrammarAccess;

@SuppressWarnings("all")
public class MyUnoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyUnoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyUnoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyUnoPackage.CARTES_19:
				sequence_Cartes_1_9(context, (Cartes_1_9) semanticObject); 
				return; 
			case MyUnoPackage.CONFIGURATION_DEPART:
				sequence_Configuration_Depart(context, (Configuration_Depart) semanticObject); 
				return; 
			case MyUnoPackage.CONTESTATIONS:
				sequence_Contestations(context, (Contestations) semanticObject); 
				return; 
			case MyUnoPackage.CUMUL:
				sequence_Cumul(context, (Cumul) semanticObject); 
				return; 
			case MyUnoPackage.FIN_MANCHE:
				sequence_Fin_Manche(context, (Fin_Manche) semanticObject); 
				return; 
			case MyUnoPackage.FIN_PARTIE:
				sequence_Fin_Partie(context, (Fin_Partie) semanticObject); 
				return; 
			case MyUnoPackage.INVERSION:
				sequence_Inversion(context, (Inversion) semanticObject); 
				return; 
			case MyUnoPackage.MAIN:
				sequence_Main(context, (Main) semanticObject); 
				return; 
			case MyUnoPackage.MANCHE:
				sequence_Manche(context, (Manche) semanticObject); 
				return; 
			case MyUnoPackage.PERDANTS_MANCHE:
				sequence_Perdants_manche(context, (Perdants_manche) semanticObject); 
				return; 
			case MyUnoPackage.PIOCHE:
				sequence_Pioche(context, (Pioche) semanticObject); 
				return; 
			case MyUnoPackage.POINTS_MANCHE:
				sequence_Points_manche(context, (Points_manche) semanticObject); 
				return; 
			case MyUnoPackage.TALON:
				sequence_Talon(context, (Talon) semanticObject); 
				return; 
			case MyUnoPackage.TOURNER_LES_MAINS:
				sequence_Tourner_les_mains(context, (Tourner_les_mains) semanticObject); 
				return; 
			case MyUnoPackage.VARIANTE_UNO:
				sequence_Variante_UNO(context, (Variante_UNO) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cartes_1_9 returns Cartes_1_9
	 *
	 * Constraint:
	 *     (suites='suites' | suites_royales='suites_royales' | interception=Interception)+
	 */
	protected void sequence_Cartes_1_9(ISerializationContext context, Cartes_1_9 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Configuration_Depart returns Configuration_Depart
	 *
	 * Constraint:
	 *     (main=Main talon=Talon riviere='riviere'? (temps_limite='temps_limite:' secondes=INT)?)
	 */
	protected void sequence_Configuration_Depart(ISerializationContext context, Configuration_Depart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Contestations returns Contestations
	 *
	 * Constraint:
	 *     (inter_contestable='inter_contestable' | plus4_contestable='plus4_contestable')+
	 */
	protected void sequence_Contestations(ISerializationContext context, Contestations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cumul returns Cumul
	 *
	 * Constraint:
	 *     (cumul_plus_2='cumul_plus_2' | cumul_plus_4='cumul_plus_4' | cumul_carte_couleur='cumul_carte_couleur' | cumul_carte_uno='cumul_carte_uno')+
	 */
	protected void sequence_Cumul(ISerializationContext context, Cumul semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fin_Manche returns Fin_Manche
	 *
	 * Constraint:
	 *     (dire_uno_obligatoire='dire_uno_obligatoire'? points_manche=Points_manche)
	 */
	protected void sequence_Fin_Manche(ISerializationContext context, Fin_Manche semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fin_Partie returns Fin_Partie
	 *
	 * Constraint:
	 *     vainqueur_total=Vainqueur_total
	 */
	protected void sequence_Fin_Partie(ISerializationContext context, Fin_Partie semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.FIN_PARTIE__VAINQUEUR_TOTAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.FIN_PARTIE__VAINQUEUR_TOTAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFin_PartieAccess().getVainqueur_totalVainqueur_totalEnumRuleCall_4_0(), semanticObject.getVainqueur_total());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Inversion returns Inversion
	 *
	 * Constraint:
	 *     (avec_carte_inversion='avec_carte_inversion' | avec_carte_sept='avec_carte_sept')+
	 */
	protected void sequence_Inversion(ISerializationContext context, Inversion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Main returns Main
	 *
	 * Constraint:
	 *     (etat_main=Etat_Main nb_mains=Nb_Mains nb_cartes_mains=Nb_Cartes_Mains)
	 */
	protected void sequence_Main(ISerializationContext context, Main semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.MAIN__ETAT_MAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.MAIN__ETAT_MAIN));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.MAIN__NB_MAINS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.MAIN__NB_MAINS));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.MAIN__NB_CARTES_MAINS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.MAIN__NB_CARTES_MAINS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainAccess().getEtat_mainEtat_MainEnumRuleCall_2_0(), semanticObject.getEtat_main());
		feeder.accept(grammarAccess.getMainAccess().getNb_mainsNb_MainsEnumRuleCall_5_0(), semanticObject.getNb_mains());
		feeder.accept(grammarAccess.getMainAccess().getNb_cartes_mainsNb_Cartes_MainsEnumRuleCall_8_0(), semanticObject.getNb_cartes_mains());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Manche returns Manche
	 *
	 * Constraint:
	 *     (
	 *         inversion=Inversion? 
	 *         tourner_les_mains=Tourner_les_mains? 
	 *         nb_cartes_jouables=Nb_cartes_jouables 
	 *         cartes_1_9=Cartes_1_9? 
	 *         pioche=Pioche 
	 *         cumul=Cumul? 
	 *         contestations=Contestations?
	 *     )
	 */
	protected void sequence_Manche(ISerializationContext context, Manche semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Perdants_manche returns Perdants_manche
	 *
	 * Constraint:
	 *     (pm_zero_pts='pm_zero_pts'? pm_pts_selon_cartes_restantes='pm_pts_selon_cartes_restantes'?)
	 */
	protected void sequence_Perdants_manche(ISerializationContext context, Perdants_manche semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pioche returns Pioche
	 *
	 * Constraint:
	 *     (nb_cartes_a_piocher=Nb_cartes_a_piocher jouer_apres_pioche=Jouer_apres_pioche)
	 */
	protected void sequence_Pioche(ISerializationContext context, Pioche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.PIOCHE__NB_CARTES_APIOCHER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.PIOCHE__NB_CARTES_APIOCHER));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.PIOCHE__JOUER_APRES_PIOCHE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.PIOCHE__JOUER_APRES_PIOCHE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPiocheAccess().getNb_cartes_a_piocherNb_cartes_a_piocherEnumRuleCall_3_0(), semanticObject.getNb_cartes_a_piocher());
		feeder.accept(grammarAccess.getPiocheAccess().getJouer_apres_piocheJouer_apres_piocheEnumRuleCall_5_0(), semanticObject.getJouer_apres_pioche());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Points_manche returns Points_manche
	 *
	 * Constraint:
	 *     (vainqueur_manche=Vainqueur_manche perdants_manche=Perdants_manche)
	 */
	protected void sequence_Points_manche(ISerializationContext context, Points_manche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.POINTS_MANCHE__VAINQUEUR_MANCHE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.POINTS_MANCHE__VAINQUEUR_MANCHE));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.POINTS_MANCHE__PERDANTS_MANCHE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.POINTS_MANCHE__PERDANTS_MANCHE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPoints_mancheAccess().getVainqueur_mancheVainqueur_mancheEnumRuleCall_3_0(), semanticObject.getVainqueur_manche());
		feeder.accept(grammarAccess.getPoints_mancheAccess().getPerdants_manchePerdants_mancheParserRuleCall_5_0(), semanticObject.getPerdants_manche());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Talon returns Talon
	 *
	 * Constraint:
	 *     nb_talons=Nb_Talons
	 */
	protected void sequence_Talon(ISerializationContext context, Talon semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.TALON__NB_TALONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.TALON__NB_TALONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTalonAccess().getNb_talonsNb_TalonsEnumRuleCall_2_0(), semanticObject.getNb_talons());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tourner_les_mains returns Tourner_les_mains
	 *
	 * Constraint:
	 *     (avec_carte_zero='avec_carte_zero' | avec_carte_uno='avec_carte_uno')+
	 */
	protected void sequence_Tourner_les_mains(ISerializationContext context, Tourner_les_mains semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variante_UNO returns Variante_UNO
	 *
	 * Constraint:
	 *     (name=STRING configuration_depart=Configuration_Depart manche=Manche fin_manche=Fin_Manche fin_partie=Fin_Partie)
	 */
	protected void sequence_Variante_UNO(ISerializationContext context, Variante_UNO semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__NAME));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__CONFIGURATION_DEPART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__CONFIGURATION_DEPART));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__MANCHE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__MANCHE));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__FIN_MANCHE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__FIN_MANCHE));
			if (transientValues.isValueTransient(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__FIN_PARTIE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoPackage.Literals.VARIANTE_UNO__FIN_PARTIE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariante_UNOAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariante_UNOAccess().getConfiguration_departConfiguration_DepartParserRuleCall_3_0(), semanticObject.getConfiguration_depart());
		feeder.accept(grammarAccess.getVariante_UNOAccess().getMancheMancheParserRuleCall_4_0(), semanticObject.getManche());
		feeder.accept(grammarAccess.getVariante_UNOAccess().getFin_mancheFin_MancheParserRuleCall_5_0(), semanticObject.getFin_manche());
		feeder.accept(grammarAccess.getVariante_UNOAccess().getFin_partieFin_PartieParserRuleCall_6_0(), semanticObject.getFin_partie());
		feeder.finish();
	}
	
	
}
